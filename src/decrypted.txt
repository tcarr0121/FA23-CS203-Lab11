He_ there!
Thank _ou all for a ]onderful semester
=e ]ish _ou all the best of luck on all _our finals
Hopefull_ _ou ]ere able to decr_pt this successfull_
Thanks!

For a number of _ears I have been familiar ]ith the observation that the qualit_ of programmers is a decreasing function of the densit_ of go to statements in the programs the_ produce.
More recentl_ I discovered ]h_ the use of the go to statement has such disastrous effects, and I became convinced that the go to statement should be abolished from all "higher level" programming languages (i.e. ever_thing e^cept, perhaps, plain machine code).
At that time I did not attach too much importance to this discover_; I no] submit m_ considerations for publication because in ver_ recent discussions in ]hich the subject turned up, I have been urged to do so.
M_ first remark is that, although the programmer's activit_ ends ]hen he has constructed a correct program, the process taking place under control of his program is the true subject matter of his activit_, for it is this process that has to accomplish the desired effect; it is this process that in its d_namic behavior has to satisf_ the desired specifications.
?et, once the program has been made, the "making' of the corresponding process is delegated to the machine.

M_ second remark is that our intellectual po]ers are rather geared to master static relations and that our po]ers to visuali`e processes evolving in time are relativel_ poorl_ developed.
For that reason ]e should do (as ]ise programmers a]are of our limitations) our utmost to shorten the conceptual gap bet]een the static program and the d_namic process, to make the correspondence bet]een the program (spread out in te^t space) and the process (spread out in time) as trivial as possible.

Let us no] consider ho] ]e can characteri`e the progress of a process.
(?ou ma_ think about this question in a ver_ concrete manner: suppose that a process, considered as a time succession of actions, is stopped after an arbitrar_ action, ]hat data do ]e have to fi^ in order that ]e can redo the process until the ver_ same point?) If the program te^t is a pure concatenation of, sa_, assignment statements (for the purpose of this discussion regarded as the descriptions of single actions) it is sufficient to point in the program te^t to a point bet]een t]o successive action descriptions.
(In the absence of go to statements I can permit m_self the s_ntactic ambiguit_ in the last three ]ords of the previous sentence: if ]e parse them as "successive (action descriptions)" ]e mean successive in te^t space; if ]e parse as "(successive action) descriptions" ]e mean successive in time.)
Let us call such a pointer to a suitable place in the te^t a "te^tual inde^."

=hen ]e include conditional clauses (if B then A), alternative clauses (if B then A1 else A2), choice clauses as introduced b_ C. A. R. Hoare (case[i] of (A1, A2,···, An)),or conditional e^pressions as introduced b_ J. McCarth_ (B1 -> E1, B2 -> E2, ···, Bn -> En), the fact remains that the progress of the process remains characteri`ed b_ a single te^tual inde^.

As soon as ]e include in our language procedures ]e must admit that a single te^tual inde^ is no longer sufficient.
In the case that a te^tual inde^ points to the interior of a procedure bod_ the d_namic progress is onl_ characteri`ed ]hen ]e also give to ]hich call of the procedure ]e refer.
=ith the inclusion of procedures ]e can characteri`e the progress of the process via a sequence of te^tual indices, the length of this sequence being equal to the d_namic depth of procedure calling.

Let us no] consider repetition clauses (like, ]hile B repeat A or repeat A until B).
Logicall_ speaking, such clauses are no] superfluous, because ]e can e^press repetition ]ith the aid of recursive procedures.
For reasons of realism I don't ]ish to e^clude them: on the one hand, repetition clauses can be implemented quite comfortabl_ ]ith present da_ finite equipment; on the other hand, the reasoning pattern kno]n as "induction" makes us ]ell equipped to retain our intellectual grasp on the processes generated b_ repetition clauses.
=ith the inclusion of the repetition clauses te^tual indices are no longer sufficient to describe the d_namic progress of the process.
=ith each entr_ into a repetition clause, ho]ever, ]e can associate a so-called "d_namic inde^," ine^orabl_ counting the ordinal number of the corresponding current repetition.
As repetition clauses (just as procedure calls) ma_ be applied nestedl_, ]e find that no] the progress of the process can al]a_s be uniquel_ characteri`ed b_ a (mi^ed) sequence of te^tual and/or d_namic indices.

The main point is that the values of these indices are outside programmer's control; the_ are generated (either b_ the ]rite-up of his program or b_ the d_namic evolution of the process) ]hether he ]ishes or not.
The_ provide independent coordinates in ]hich to describe the progress of the process.

=h_ do ]e need such independent coordinates?
The reason is - and this seems to be inherent to sequential processes - that ]e can interpret the value of a variable onl_ ]ith respect to the progress of the process.
If ]e ]ish to count the number, n sa_, of people in an initiall_ empt_ room, ]e can achieve this b_ increasing n b_ one ]henever ]e see someone entering the room.
In the in-bet]een moment that ]e have observed someone entering the room but have not _et performed the subsequent increase of n, its value equals the number of people in the room minus one!

The unbridled use of the go to statement has an immediate consequence that it becomes terribl_ hard to find a meaningful set of coordinates in ]hich to describe the process progress.
Usuall_, people take into account as ]ell the values of some ]ell chosen variables, but this is out of the question because it is relative to the progress that the meaning of these values is to be understood!
=ith the go to statement one can, of course, still describe the progress uniquel_ b_ a counter counting the number of actions performed since program start (vi`. a kind of normali`ed clock).
The difficult_ is that such a coordinate, although unique, is utterl_ unhelpful. In such a coordinate s_stem it becomes an e^tremel_ complicated affair to define all those points of progress ]here, sa_, n equals the number of persons in the room minus one!

The go to statement as it stands is just too primitive; it is too much an invitation to make a mess of one's program.
One can regard and appreciate the clauses considered as bridling its use.
I do not claim that the clauses mentioned are e^haustive in the sense that the_ ]ill satisf_ all needs, but ]hatever clauses are suggested (e.g. abortion clauses) the_ should satisf_ the requirement that a programmer independent coordinate s_stem can be maintained to describe the process in a helpful and manageable ]a_.

It is hard to end this ]ith a fair ackno]ledgment.
Am I to judge b_ ]hom m_ thinking has been influenced?
It is fairl_ obvious that I am not uninfluenced b_ Peter Landin and Christopher Strache_.
Finall_ I should like to record (as I remember it quite distinctl_) ho] Hein` @emanek at the pre-ALGOL meeting in earl_ 1959 in Copenhagen quite e^plicitl_ e^pressed his doubts ]hether the go to statement should be treated on equal s_ntactic footing ]ith the assignment statement.
To a modest e^tent I blame m_self for not having then dra]n the consequences of his remark

The remark about the undesirabilit_ of the go to statement is far from ne].
I remember having read the e^plicit recommendation to restrict the use of the go to statement to alarm e^its, but I have not been able to trace it; presumabl_, it has been made b_ C. A. R. Hoare.
In [1, Sec. 3.2.1.] =irth and Hoare together make a remark in the same direction in motivating the case construction: "Like the conditional, it mirrors the d_namic structure of a program more clearl_ than go to statements and s]itches, and it eliminates the need for introducing a large number of labels in the program."

In [2] Guiseppe Jacopini seems to have proved the (logical) superfluousness of the go to statement.
If _ou made it this far, in the comments of _our Canvas submission, t_pe "Dijkstra" for + 10 bonus points
The e^ercise to translate an arbitrar_ flo] diagram more or less mechanicall_ into a jump-less one, ho]ever, is not to be recommended.
Then the resulting flo] diagram cannot be e^pected to be more transparent than the original one.

References:
=irth, Niklaus, and Hoare C. A. R. A contribution to the development of ALGOL. Comm. ACM 9 (June 1966), 413-432.
BÖhm, Corrado, and Jacopini Guiseppe. Flo] diagrams, Turing machines and languages ]ith onl_ t]o formation rules. Comm. ACM 9 (Ma_ 1966), 366-371.

Edsger =. Dijkstra
Technological Universit_
Eindhoven, The Netherlands
